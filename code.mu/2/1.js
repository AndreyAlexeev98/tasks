// ‚Ññ1
// –î–∞–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞. –ù–∞–π–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –Ω—É–ª—è –≤ —Å—Ç—Ä–æ–∫–µ.
function findZero(string) {
  return string.indexOf("0");
}

// ‚Ññ2
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —á–∏—Å–ª–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 1000, —Å—É–º–º–∞ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Ü–∏—Ñ—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ –ø—è—Ç–∏.
function outputNumbers() {
  for (let i = 1; i < 1000; i++) {
    const numbersStringType = i.toString();

    if (
      +numbersStringType[0] +
        +numbersStringType[numbersStringType.length - 1] ===
      5
    ) {
      console.log(i);
    }
  }
}

// ‚Ññ3
// –î–∞–Ω –º–∞—Å—Å–∏–≤. –£–¥–∞–ª–∏—Ç–µ –∏–∑ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ (–Ω–∞ –º–µ—Å—Ç–µ), —Ç.–µ. —Å –º—É—Ç–∞—Ü–∏–µ–π (–∏–∑–º–µ–Ω–µ–Ω–∏–µ–º) –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
function removeElems(array, ...rest) {
  // –†–µ—à–µ–Ω–∏–µ ‚Ññ1 - –Ω–∞–∏—Ö—É–¥—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  // –°–ª–æ–∂–Ω–æ—Å—Ç—å: ùëÇ(ùëõ√óùëö), –≥–¥–µ ùëõ ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ array, ùëö ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ rest.
  // –ü—Ä–∏—á–∏–Ω—ã –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
  // - –î–≤–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–∞.
  // - –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ splice –∏–∑–º–µ–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.
  // - –û—Å–æ–±–µ–Ω–Ω–æ –∑–∞—Ç—Ä–∞—Ç–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤.

  //   for (let i = 0; i < array.length; i++) {
  //     for (let j = 0; j < rest.length; j++) {
  //       if (array[i] === rest[j]) {
  //         array.splice(i, 1);
  //         i--;
  //       }
  //     }
  //   }

  // –†–µ—à–µ–Ω–∏–µ ‚Ññ2 –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  // –°–ª–æ–∂–Ω–æ—Å—Ç—å: ùëÇ(ùëõ√óùëö)
  // –ü–æ—á–µ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—à–µ, —á–µ–º —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
  // - –£–±—Ä–∞–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–æ–≤, –Ω–æ –≤—ã–∑–æ–≤ rest.includes –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–µ—Ç —Ç—É –∂–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å.
  // - –ö–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, splice –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞.

  //   let i = 0;
  //   while (i < array.length) {
  //     if (rest.includes(array[i])) {
  //       array.splice(i, 1);
  //     } else {
  //       i++;
  //     }
  //   }

  // –†–µ—à–µ–Ω–∏–µ ‚Ññ3 –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  // - –°–ª–æ–∂–Ω–æ—Å—Ç—å: ùëÇ(ùëõ√óùëö)
  // - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
  // - –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ö–æ–∂–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –∏–∑-–∑–∞ –≤—ã–∑–æ–≤–∞ rest.includes –Ω–∞ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é.
  // - –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏.

  //   array = array.filter((item) => !rest.include(item));

  // –†–µ—à–µ–Ω–∏–µ ‚Ññ4 –ù–∞–∏–ª—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  //   –°–ª–æ–∂–Ω–æ—Å—Ç—å: ùëÇ(ùëõ+ùëö)
  // –ü—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã—à–µ:
  // - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è rest –≤ Set (ùëÇ(ùëö)) –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Set.has –∑–∞ ùëÇ(1).
  // - splice –≤—Å–µ –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞, –Ω–æ —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ.

  let valuesToRemove = new Set(rest);
  let i = 0;

  while (i < array.length) {
    if (valuesToRemove.has(array[i])) {
      array.splice(i, 1);
    } else {
      i++;
    }
  }
}

// ‚Ññ4
// –î–∞–Ω –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç —Ç–∞–∫–æ–π: [1, 2, 3, 4, 5, 6]
// –ù–∞–π–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.

function sumHalf(arr) {
  const halfArr = arr.slice(0, Math.floor(arr.length / 2));
  return halfArr.reduce((sum, num) => (sum += num), 0);

  // –ò–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∏–∫–µ
  //   const sum = 0;
  //   for (let i = 0; i < halfArr.length; i++) {
  //     sum += halfArr[i];
  //   }

  //   return sum;
}
