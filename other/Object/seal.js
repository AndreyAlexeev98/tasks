// Задача 1: Защита объекта от добавления и удаления свойств
// Дан объект профиля пользователя. Вы хотите запретить добавление или удаление свойств, но разрешить изменение существующих значений. Используйте Object.seal.

// Пример:
const user = {
  name: "Alice",
  age: 30,
};

Object.seal(user);

// Попробуем изменить объект
user.age = 31; // Изменение разрешено
user.city = "New York"; // Добавление не выполнилось, ошибки нету
delete user.name; // Удаление не выполнилось, ошибки нету

console.log(user);
// Output: { name: "Alice", age: 31 }
// Цель задачи: Убедиться, что структура объекта (набор ключей) остается неизменной, но значения могут быть обновлены.

// Задача 2: Контроль настроек приложения
// Дан объект с настройками приложения. Вы хотите разрешить изменение только значений, но не добавление или удаление настроек.

// Пример:
const settings = {
  theme: "dark",
  notifications: true,
  language: "en",
};

Object.seal(settings);

// Попробуем изменить объект
settings.theme = "light"; // Изменение разрешено
settings.volume = 50; // Добавление не выполнилось, ошибки нету
delete settings.language; // Удаление не выполнилось, ошибки нету

console.log(settings);
// Output: { theme: "light", notifications: true, language: "en" }
// Цель задачи: Гарантировать, что набор доступных настроек остается неизменным, но сами настройки можно обновить.

// Примечание
// Object.seal — это полезный метод, когда важно сохранить структуру объекта, но вы хотите дать возможность обновлять значения. Например, в сценариях с конфигурацией или фиксированными наборами данных.
