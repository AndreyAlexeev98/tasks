// Задача 1: Защита конфигурационного объекта
// Дан объект с конфигурацией приложения. Этот объект не должен быть изменен после инициализации, чтобы избежать ошибок. Используйте Object.freeze для защиты.
// Пример:
const config = {
  apiUrl: "https://api.example.com",
  timeout: 5000,
  retries: 3,
};

Object.freeze(config); // морозим весь обьект поверхностно*

// Попробуем изменить объект
config.apiUrl = "https://malicious-site.com"; // Ошибки не вызывает, но и не меняет свойство
config.newKey = "This shouldn't work"; // Ошибки не вызывает, но и не добавляет новое свойство

console.log(config);
// Output: { apiUrl: "https://api.example.com", timeout: 5000, retries: 3 }
// Цель задачи: Защитить объект от изменений, чтобы быть уверенным, что приложение работает с неизменяемыми настройками.

// Задача 2: Создание неизменяемого набора констант
// У вас есть объект с константами для расчетов. Они должны быть защищены от изменений. Используйте Object.freeze.
// Пример:
const constants = {
  PI: 3.14159,
  E: 2.71828,
  GOLDEN_RATIO: 1.61803,
};

Object.freeze(constants);

// Попробуем изменить объект
constants.PI = 3; // Ошибка в строгом режиме или игнорируется
constants.NEW_CONST = 42; // Игнорируется

console.log(constants);
// Output: { PI: 3.14159, E: 2.71828, GOLDEN_RATIO: 1.61803 }
// Цель задачи: Убедиться, что математические или другие важные константы не будут случайно изменены.

// * - Примечание
// Object.freeze только защищает текущий уровень объекта. Если объект вложенный, то его свойства можно изменить, если они не заморожены. Для полной защиты используется рекурсивное замораживание.
